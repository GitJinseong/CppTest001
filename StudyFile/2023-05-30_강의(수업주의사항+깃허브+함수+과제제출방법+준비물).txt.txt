NCS = 지식  
+
습관(출결) → 출결중요 
+
태도(질문) → 질문시 (배경지식 / 어떻게 이해했는지 / 무엇을 시도했고, 무엇이 안되는지),
처음듣는 단어나 모르는 것들 미리 검색해보고 물어보기(15분 검색)
3주간 프로젝트 작업할 때 1주일 안에 프로토타입 못만들면 프로젝트를 실패할 확률이 높다


필수 준비물 = 메모지, 펜 or 태블릿 pc(항상 필기할게 생긴다.)
선택 준비물 = 노트북(작업환경 유지), 개인용 저장드라이브(코드 관리할 때 유용)

서브버전(코드 업로드 후 관리 / 작업환경 일치 가능) = 
Git, SVN 사용

[프로젝트 관리방법]
블로그 -> 프로그래밍 이론이나 개념, 프로젝트 개요, 개발 중 느낀 점 등을 기록.
메모하는 습관 형성에 도움이 됨.

마인드 맵 -> 아이디어 등 쉽게 잊혀지거나 설명하기 어려운 생각을 그래픽 형태로 관리. 
개발초기에 어떤 생각을 했는지 파악할 수 있다.

플로우 차트 -> 순서도. 게임의 로직 등 복잡한 제어흐름을 그래픽 형태로 표현하여 관리.
프로젝트의 코어 로직, 부분적인 로직의 오류 등을 파악하는데 도움이 된다.

★중요★
[Git(버전 관리)] 
: 소스코드의 변경 이력, 협업 시 동료의 변경 이력과 코멘트 등 종합적인 소스코드 관리.
정상 동작을 하는 버전과 개발중인 버전이 어떻게 다른 지 파악하는데 도움이 된다.
<로컬 저장소>
내 컴퓨터의 하드디스크에 존재한다.
내가 작성, 수정한 코드도 내 컴퓨터에 있다.
<원격 저장소>
멀리 있는 다른 컴퓨터의 하드디스크에 존재한다.
내가 작성, 수정한 코드로 덮어쓰기 해야 변한다.

[깃 절차]
1. Add : 로컬 수정사항을 스테이지 영역에 추가(무엇을 변경할 것인지 선택하는 과정)
2. Commit : 스테이지 영역의 내용을 깃에 기록(변경된 것이 무엇인지 기록하는 과정)
----여기 까지 취소가능----
3. Push : 커밋한 내용을 원격 레지스토리에 덮어쓰기(여기 부터 원격에 반영된다. / 파일이 변하니 신중히 한다.)
---올리기 전에 코드 몇줄인지 확인하는게 좋다.---

[깃 사용법]
1단계(Add): 소스트리-클론에 깃허브 저장소 html주소를 붙여넣고 로컬디스크에 클론 파일 생성한다음
(클론 파일 vscode에 연동 하는게 좋음) 수정하면 소스트리-파일 상태에 스테이지에 올라가지 않은 파일 목록에 나온다.
해당 파일을 스테이지에 올리면 된다.
2단계(커밋) : 파일을 스테이지에 올린 후 하단을 보면 댓글 창 비스무리 한게 있는데 수정했다고 댓글 달아주면 된다.
*커밋 메시지를 적을 때 컨벤션 규칙에 따라 적는다.(커밋 메시지에는 절대 공란/욕/장난 사용금지)
ex) Docs:(ReadMe.md) Update ReadMe File.
Style:(~~~ 프로젝트) 코드 포맷을 일부 변경했음.
3단계(Push) : 파일을 서버에 올린다. 신중히 생각한 후에 push해야 한다.
*ReadMe.md 내용 수정시 마크다운 룰에 따라 작성한다. ex)문장의 끝에 스페이스 4번 
패치 : 다른 곳에서 따로 작업한 경우 패치->풀(불러와서 덮어쓰기)을 사용한다.
서버에 있는 내 파일을 로컬로 받아온다.
패치(Fetch)는 원격 저장소에 있는 프로젝트를 로컬 저장소에 가져오는 것입니다. 
풀(Pull)과는 다르게 로컬 저장소에 있는 프로젝트를 병합하지 않고 가져오기만 합니다. 
원격 저장소에 있는 변경사항을 확인해 볼 경우 패치를 사용합니다.

.gitignore : 쓸모 없는 파일을 업로드 하지 않게 차단한다.
gitignore.io 홈페이지에서 c++ 와 visual studio 두 개를 검색해서 선택한 후 나오는 소스코드를 텍스트 파일로 저장후 확장자 지우고 .gitignore로 파일명 변경하기.
이때 ignore을 사용할 프로젝트 폴더의 최상단인 루트 폴더에 .gitignore파일을 넣는다.

[Doxygen(클래스 다이어그램)]
: 클래스의 필드와 메서드, 코드의 참조관계 등 복잡한 코드의 구성을 색인 가능한 텍스트,
그래픽 형태로 표현하여 관리. 어떤 기능이 존재하는지, 어떻게 사용하는 지 파악하는데 도움이 된다.

[과제 제출 가이드]

0. 소스 원본(cpp, vcxproj, sin) 제출하기
1. 기간 엄수
1-1. 기한 내에 미완성한 경우 -> 미완성인 상태로 제출.

[단축키]
Ctrl + 화살표(좌우) 누르면 단어 단위로 커서가 이동함 
Shift + Alt + 화살표(상하) 한 번에 여러 줄 적을 수 있음
Ctrl + c + v 해당 줄에 있는거 복사하고 줄바꿈 함

[이스케이프 시퀸스]
: \+알파벳으로 사용하는 기능
\a	경고(alert)
\n	줄바꿈(new line)
\t	수평 탭(horizontal tab)
\v	수직 탭(vertical tab)
\b	백스페이스(backspace)
\f	폼 피드(form feed)
\r	캐리지 리턴(carriage return)
\\	백슬래시( \, backslash)
\’	작음따옴표( ‘, single quotes)
\”	큰따옴표( “, double quotes)
\ooo	8진수 숫자를 사용하여 ASCII 코드의 문자 표현
\xhh	16진수 숫자를 사용하여 ASCII 코드의 문자 표현

[변수] 
: 컴퓨터 메모리에 값을 저장하기 위한 공간
종류로는 구조체, 클래스, 대리자가 있다.

[함수]
: 컴퓨터가 작업을 수행하도록 하는 기능(입력&출력)
메서드 : 어떠한 클래스가 가지고 있는 멤버
프로시저, 이벤트라는 이름으로 불린다.
그리고 함수는 몸통(내용)이 있다. 함수의 내용은 중괄호({}) 안에 적는다.
ex) int main(void)
    {
      #내용
    }

[함수 형식]
 ex) int main(void) = 출력형태+함수이름+입력형태

*팁 int의 경우 return 값이 있어야 한다. void의 경우 필요없음

[프로그램이란?] 
: '정해진 순서'에 의해서 진행되는 함수의 호출을 말하는 것.

['정해진 순서']
1. 함수의 정의 : 함수를 코드로 적는다.
2. 함수의 호출 : 함수의 실행을 명령한다.
3. 인자의 전달 : 함수의 실행을 명령할 때, '입력 값'을 전달한다.

['입력 값']
: 매개변수, 인자, 인수로 불린다.

*int 함수에 사용되는 return은
1.함수의 종료와
2.값의 전달(반환)이라는 두 가지 의미를 지닌다.
ex) return 0;






